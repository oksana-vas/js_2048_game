{"version":3,"sources":["scripts/main.js"],"names":["startButton","document","querySelector","gameField","gameScore","cells","querySelectorAll","messages","messageLose","messageWin","score","BOARD_SIZE","SCORE_TO_WIN","ARROW_UP","ARROW_DOWN","ARROW_LEFT","ARROW_RIGHT","board","startGame","classList","remove","add","textContent","addRandomNumber","hasEmptyCells","availableCells","i","j","push","x","y","randomNum","Math","random","length","randomCell","floor","renderBoard","row","col","cell","rows","className","updateScore","value","isWinner","some","contains","slideHorizontal","direction","canBeMerged","hasRowChanged","rowCopy","currentRow","reverse","slide","hasBoardChanged","slideVertical","hasColumnChanged","currentCol","columnCopy","prev","current","JSON","stringify","filteredRow","removeZeroes","rowArray","filter","number","canMerge","addEventListener","forEach","message","event","key"],"mappings":"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","file":"main.3a4d6bc0.js","sourceRoot":"../src","sourcesContent":["'use strict';\n\nconst startButton = document.querySelector('.button');\nconst gameField = document.querySelector('.game-field');\nconst gameScore = document.querySelector('.game-score');\nconst cells = document.querySelectorAll('.field-cell');\n\nconst messages = document.querySelectorAll('.message');\nconst messageLose = document.querySelector('.message-lose');\nconst messageWin = document.querySelector('.message-win');\n\nlet score = 0;\n\nconst BOARD_SIZE = 4;\nconst SCORE_TO_WIN = 2048;\n\nconst ARROW_UP = 'ArrowUp';\nconst ARROW_DOWN = 'ArrowDown';\nconst ARROW_LEFT = 'ArrowLeft';\nconst ARROW_RIGHT = 'ArrowRight';\n\nconst board = [\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n];\n\nstartButton.addEventListener('click', () => {\n  if (startButton.classList.contains('start')) {\n    startGame();\n  }\n\n  [...messages].forEach(message => message.classList.add('hidden'));\n\n  for (let i = 0; i < BOARD_SIZE; i++) {\n    for (let j = 0; j < BOARD_SIZE; j++) {\n      board[i][j] = 0;\n    }\n  }\n\n  [...cells].forEach(cell => {\n    cell.className = 'field-cell';\n    cell.textContent = '';\n  });\n\n  score = 0;\n  gameScore.textContent = score;\n\n  addRandomNumber();\n  addRandomNumber();\n\n  renderBoard();\n});\n\n// eslint-disable-next-line no-shadow\ndocument.addEventListener('keydown', (event) => {\n  switch (event.key) {\n    case ARROW_UP:\n    case ARROW_DOWN:\n      slideVertical(event.key);\n      break;\n\n    case ARROW_LEFT:\n    case ARROW_RIGHT:\n      slideHorizontal(event.key);\n      break;\n\n    default:\n      return;\n  }\n\n  if (isWinner()) {\n    messageWin.classList.remove('hidden');\n  }\n});\n\nfunction startGame() {\n  startButton.classList.remove('start');\n  startButton.classList.add('restart');\n  startButton.textContent = 'Restart';\n}\n\nfunction addRandomNumber() {\n  if (!hasEmptyCells()) {\n    return;\n  }\n\n  const availableCells = [];\n\n  for (let i = 0; i < BOARD_SIZE; i++) {\n    for (let j = 0; j < BOARD_SIZE; j++) {\n      if (board[i][j] === 0) {\n        availableCells.push({\n          x: i,\n          y: j,\n        });\n      }\n    }\n  }\n\n  const randomNum = Math.random() < 0.9 ? 2 : 4;\n\n  if (availableCells.length) {\n    const randomCell\n      = availableCells[Math.floor(Math.random() * availableCells.length)];\n\n    board[randomCell.x][randomCell.y] = randomNum;\n  }\n}\n\nfunction renderBoard() {\n  for (let row = 0; row < BOARD_SIZE; row++) {\n    for (let col = 0; col < BOARD_SIZE; col++) {\n      const cell = gameField.rows[row].cells[col];\n\n      cell.className = `field-cell field-cell--${board[row][col]}`;\n      cell.textContent = board[row][col] || '';\n    }\n  }\n}\n\nfunction updateScore(value) {\n  score += value;\n  gameScore.textContent = score;\n}\n\nfunction isWinner() {\n  return [...cells].some(cell => {\n    return cell.classList.contains(`field-cell--${SCORE_TO_WIN}`);\n  });\n}\n\nfunction slideHorizontal(direction) {\n  if (!hasEmptyCells() && !canBeMerged()) {\n    messageLose.classList.remove('hidden');\n\n    return;\n  }\n\n  let hasRowChanged = false;\n\n  for (let row = 0; row < BOARD_SIZE; row++) {\n    const rowCopy = [...board[row]];\n    let currentRow = board[row];\n\n    if (direction === ARROW_RIGHT) {\n      currentRow.reverse();\n    }\n\n    currentRow = slide(currentRow);\n\n    if (direction === ARROW_RIGHT) {\n      currentRow.reverse();\n    }\n\n    board[row] = currentRow;\n\n    if (hasBoardChanged(rowCopy, currentRow)) {\n      hasRowChanged = true;\n    }\n  }\n\n  if (hasRowChanged) {\n    addRandomNumber();\n    renderBoard();\n  }\n}\n\nfunction slideVertical(direction) {\n  if (!hasEmptyCells() && !canBeMerged()) {\n    messageLose.classList.remove('hidden');\n\n    return;\n  }\n\n  let hasColumnChanged = false;\n\n  for (let col = 0; col < BOARD_SIZE; col++) {\n    let currentCol = [\n      board[0][col],\n      board[1][col],\n      board[2][col],\n      board[3][col],\n    ];\n    const columnCopy = [...currentCol];\n\n    if (direction === ARROW_DOWN) {\n      currentCol.reverse();\n    }\n\n    currentCol = slide(currentCol);\n\n    if (direction === ARROW_DOWN) {\n      currentCol.reverse();\n    }\n\n    for (let i = 0; i < BOARD_SIZE; i++) {\n      board[i][col] = currentCol[i];\n    }\n\n    if (hasBoardChanged(columnCopy, currentCol)) {\n      hasColumnChanged = true;\n    }\n  }\n\n  if (hasColumnChanged) {\n    addRandomNumber();\n    renderBoard();\n  }\n}\n\nfunction hasBoardChanged(prev, current) {\n  return JSON.stringify(prev) !== JSON.stringify(current);\n}\n\nfunction slide(row) {\n  let filteredRow = removeZeroes(row);\n\n  for (let i = 0; i < filteredRow.length - 1; i++) {\n    if (filteredRow[i] === filteredRow[i + 1]) {\n      filteredRow[i] *= 2;\n      filteredRow[i + 1] = 0;\n\n      updateScore(filteredRow[i]);\n    }\n  }\n\n  filteredRow = removeZeroes(filteredRow);\n\n  while (filteredRow.length < BOARD_SIZE) {\n    filteredRow.push(0);\n  }\n\n  return filteredRow;\n}\n\nfunction removeZeroes(rowArray) {\n  return rowArray.filter(number => number !== 0);\n}\n\nfunction canBeMerged() {\n  let canMerge = false;\n\n  for (let row = 0; row < BOARD_SIZE - 1; row++) {\n    for (let col = 0; col < BOARD_SIZE - 1; col++) {\n      if ((board[row][col] === board[row + 1][col])\n        || (board[row][col] === board[row][col + 1])) {\n        canMerge = true;\n\n        return canMerge;\n      }\n    }\n  }\n\n  return canMerge;\n}\n\nfunction hasEmptyCells() {\n  for (let row = 0; row < BOARD_SIZE; row++) {\n    for (let col = 0; col < BOARD_SIZE; col++) {\n      if (board[row][col] === 0) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n"]}